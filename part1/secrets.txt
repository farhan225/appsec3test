Part 1: Securing Secrets.

For this part, your job will be to find some the places in which secrets are used and replace them with a more secure way of doing secrets.

Reviewed the .yaml files found in various directories and the following files have the MYSQL database secrets exposed in plain text:

/GiftCardSite/k8/django-deployment.yaml
/db/k8/db-deployment.yaml
/db/k8s/db-deployment.yaml

I observed how admin username and password is protected in the django-deployment.yaml. I looked at the file django-admin-pass-secret.yaml file and noticed
that username and password is encrypted. 

I further reviewed "Managing Secret using Configuration File" in Kubernetes documentation- https://kubernetes.io/docs/tasks/configmap-secret/managing-secret-using-config-file/ 

I copied the content from django-admin-pass-secret.yaml as a reference and created a new file called secrets.yaml.

as per the documentation, i converted the plain text password to base 64 by running echo -n 'thisisatestthing.' | base64

in the newly created secrets.yaml file, populated the data field with MYSQL_ROOT_PASSWORD: dGhpc2lzYXRlc3R0aGluZy4=

the config file is set up as below:

apiVersion: v1
kind: Secret
metadata:
    name: mysqlloginsecrets
type: Opaque
data:
    MYSQL_ROOT_PASSWORD: dGhpc2lzYXRlc3R0aGluZy4=


Modified all three identified files earlier and updated hardcoded reference to plian text password and load from the environmental variables:

env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                    name: mysqlloginsecrets
                    key: MYSQL_ROOT_PASSWORD 

To create the secret called "mysqlloginsecrets" i ran the following command so that it can be used as environmental variable.

kubectl apply -f mysql-secrets.yaml




The SECRET_KEY is stored in the settings.py file and according to best practices this variable should be kept separate from the code. 
As such i used Django library "Django-environ" to manage environmental variables such as SECRET_KEY.

Implementation steps to keep secret out of source code:

added django-environ to requirements.txt so that its installed during the rebuild.

created a file called .env and saved in the same folder as settings.py with below content

SECRET_KEY=kmgysa#fz+9(z1*=c0ydrjizk*7sthm2ga1z4=^61$cxcq8b$l

updated settings.py with below

import environ
env = environ.Env()
environ.Env.read_env()
SECRET_KEY = env('SECRET_KEY')

settings.py now should  read the Secret key from .env file.

I deleted all the pods using the commands below:

kubectl delete -f proxy/k8
kubectl delete -f GiftcardSite/k8
kubectl delete -f db/k8


I rebuilt the Docker container for the Django application, and updated the pods using the kubectl apply commands specified in the assignment documentation.

i was able to run the gift card website with no issue confirming that all the secrets values are read from environmental variables.

Furthermore, to validate that inside a container that consumes a secret in the environment variables, the secret keys appear as normal environment variables containing 
the base64 decoded values of the secret data. I accessed the docker container shell by issuing the following command:


Farhans-MBP:appsec3test farhanabdullah$ kubectl exec --stdin --tty assignment3-django-deploy-fc8cf94c4-q42ht -- sh
/GiftcardSite $ echo $MYSQL_ROOT_PASSWORD
thisisatestthing.
/GiftcardSite $ echo $ADMIN_UNAME
admin
/GiftcardSite $ echo $ADMIN_PASS
thisisatestthing.
/GiftcardSite $ 








